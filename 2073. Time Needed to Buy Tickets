// High Level Approach using Deque O(N)

class Solution {
    public static int timeRequiredToBuy(int[] arr, int k) {
    // Change to a queue 
    Deque<Integer> queue = new LinkedList<>();

    for (int num : arr) {
      queue.add(num);
    }

    // K is the element index that is underlined that we are keeping count of

    int count = 0; 
    int kindex = k; 


    while (queue != null) {

     // If the Kindex is found to be 0, and it is 1, we will return the count. 
      if (kindex == 0 && queue.peek() == 1) {
        return count + 1;
      } else if (kindex == 0) {
        kindex = queue.size() - 1;
      } else {
        kindex--;
      }

  // If the front is 1, remove it entirely from the list
        if (queue.peek() == 1) {
          queue.remove();
        }

        else {
          Integer front = queue.removeFirst();

          front = front - 1;

          // add it to the back 

          queue.addLast(front);
        }

        count++;

    }

    return count; 



  }
}



// Low level approach without simulating, and calculating O(n)


class Solution {
    public static int timeRequiredToBuy(int[] tickets, int k) {
    int time = 0; 

    for (int i = 0; i < tickets.length; i++) {
        // If the current person is before or after at the desired person 'k'

        if (i <= k) {
            // Buy the min of tickets available at person 'k' and at the current person 
            time += Math.min(tickets[k], tickets[i]);
        } else {
            // If the current person is after 'k', buy the min of tickets available at person 'k' - 1) and the current person

            time += Math.min(tickets[k] - 1, tickets[i]);
        }
    }

    return time; 



  }
}
