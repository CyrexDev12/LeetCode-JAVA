import java.util.HashMap;
import java.util.Map;

public class Solution {
    public double soupServings(int n) {
        if (n >= 4800) return 1.0; // optimization
        int units = (n + 24) / 25;
        Map<String, Double> memo = new HashMap<>();
        return dp(units, units, memo);
    }

    private double dp(int a, int b, Map<String, Double> memo) {
        if (a <= 0 && b <= 0) return 0.5;
        if (a <= 0) return 1.0;
        if (b <= 0) return 0.0;

        String key = a + "," + b;
        if (memo.containsKey(key)) return memo.get(key);

        double prob = 0.25 * (
            dp(a - 4, b, memo) +
            dp(a - 3, b - 1, memo) +
            dp(a - 2, b - 2, memo) +
            dp(a - 1, b - 3, memo)
        );

        memo.put(key, prob);
        return prob;
    }
}
