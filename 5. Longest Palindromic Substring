// Time complexity O(n^3)

class Solution {
    public String longestPalindrome(String s) {
        // Must be greater than 1 letter min 
        if (s.length() == 0) {
            return "The string is empty";
        }

        // Go through each letter and after each letter we will check to see 

        ArrayList<String> resultList = new ArrayList<>();
        

        for (int i = 0; i < s.length(); i++) {
            for (int j = s.length(); j > i; j--) {
                // Substring Builder 
                String subString = s.substring(i, j);
                String reversed = new StringBuilder(subString).reverse().toString();

                    if (reversed.equals(subString)) {
                        resultList.add(subString);
                    }

            }


            // Now we return the biggest String from the result list

        }
        return findLongest(resultList);
    }


    public String findLongest(ArrayList<String> stringList) {
        if (stringList == null || stringList.isEmpty()) {
            return null; // Handle empty or null lists
        }

        String longestString = stringList.get(0);
        int maxLength = longestString.length();

        for (int i = 1; i < stringList.size(); i++) {
            String currentString = stringList.get(i);
            if (currentString.length() > maxLength) {
                maxLength = currentString.length();
                longestString = currentString;
            }
        }
        return longestString;
    }
    }


// Time Complexity O(n^2)

class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) return "";

        int start = 0, end = 0;

        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);     // Odd length
            int len2 = expandAroundCenter(s, i, i + 1); // Even length
            int len = Math.max(len1, len2);

            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }

        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++;
        }
        return right - left - 1;
    }
}

// O(n) Manacher's Algorithm 

class Solution {
    public String longestPalindrome(String s) {
        StringBuilder sPrime = new StringBuilder("#");
        for (char c : s.toCharArray()) {
            sPrime.append(c).append("#");
        }

        int n = sPrime.length();
        int[] palindromeRadii = new int[n];
        int center = 0;
        int radius = 0;

        for (int i = 0; i < n; i++) {
            int mirror = 2 * center - i;

            if (i < radius) {
                palindromeRadii[i] = Math.min(
                    radius - i,
                    palindromeRadii[mirror]
                );
            }

            while (
                i + 1 + palindromeRadii[i] < n &&
                i - 1 - palindromeRadii[i] >= 0 &&
                sPrime.charAt(i + 1 + palindromeRadii[i]) ==
                    sPrime.charAt(i - 1 - palindromeRadii[i])
            ) {
                palindromeRadii[i]++;
            }

            if (i + palindromeRadii[i] > radius) {
                center = i;
                radius = i + palindromeRadii[i];
            }
        }

        int maxLength = 0;
        int centerIndex = 0;
        for (int i = 0; i < n; i++) {
            if (palindromeRadii[i] > maxLength) {
                maxLength = palindromeRadii[i];
                centerIndex = i;
            }
        }

        int startIndex = (centerIndex - maxLength) / 2;
        String longestPalindrome = s.substring(
            startIndex,
            startIndex + maxLength
        );

        return longestPalindrome;
    }
}

