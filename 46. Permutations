class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();

        backtrack(new ArrayList<>(), ans, nums);

        return ans;
            
        }


    public void backtrack(List<Integer> curr, List<List<Integer>> ans, int[] nums) {
       if (curr.size() == nums.length) {
        ans.add(new ArrayList<>(curr));
        return;
       }

       for (int num : nums) {
        if (!curr.contains(num)) {
            curr.add(num);
            backtrack(curr, ans, nums);
            curr.remove(curr.size() - 1);
        }
       }


    }
}

// Solution 2


class OtherSolution {
    List<List<Integer>> ans ;
    public List<List<Integer>> permute(int[] nums) {
        
        ans = new ArrayList<>() ;

        fun( nums , 0 ) ;

        return ans ;

    }
    public void fun( int nums[] , int k ){
        // Base case 
        if( k == nums.length ){

            // Creating a list to store nums 
            ArrayList<Integer> temp = new ArrayList<>() ;
            for( int a : nums )
                temp.add( a ) ;
            
            // adding temp to answer 
            ans.add( temp ) ;

            return ;
        }

        // for all choices 
        for( int i = k ; i < nums.length ; i++ ){
            // applying the choice 
            swap( i , k , nums ) ;
            // calling recursion
            fun( nums , k+1 ) ;
            // backtrack i.e removing the choice applied
            swap( i , k , nums ) ;

        }


    }
    public void swap( int i , int k , int nums[] ){
        int temp = nums[i] ;
        nums[i] = nums[k] ;
        nums[k] = temp ;
    }
}
